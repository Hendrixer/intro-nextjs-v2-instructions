{"pageProps":{"post":{"attributes":{"title":"Defining routes","description":""},"html":"<h2 id=\"file-based-routing\">File based routing</h2>\n<p>Next.js uses file-based routing. This means, instead of configuring a router yourself like you would with react-router or express for an API, you follow a set of folder and file naming conventions and Next.js will configure the router for you. It&#39;s really magical.</p>\n<br>\n\n<h2 id=\"app-directory\">App directory</h2>\n<p>Next.js 13 introduces the <code>app</code> directory that expects you to follow file based routing. Previously, there was the <code>pages</code> directory (which still works with v13). They both can handle file based routing but in different ways. We&#39;ll mostly focus on the app directory and talk about the differences.\n<br></p>\n<p>All pages must go in the <code>app</code> directory. To create routes, we create a folder with the path of the route, and then a <code>page.{tsx, jsx, js}</code>. For the index route, we don&#39;t need a folder, because the URL for the index page doesn&#39;t have a path. We can just create the <code>page</code> file.</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">IndexPage</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>home<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n}\n</code></pre>\n<p>For a route that has a named path, we can create a folder. For the contact page, we can create a folder called <code>contact</code>. Then in that folder, we can create the <code>page.js</code> file for the route. So you should have this\n<code>./app/contact/page.js</code> which will create a route for <code>/contact</code>.</p>\n<h2 id=\"dynamic-routes\">Dynamic routes</h2>\n<p>If your route path has a dynamic segment, we can define that as well. For our blog, the url would look like this <code>/blog/:title</code>. And our file structure will look similar: <code>./app/blog/[title]/page.js</code>. We can access the route param inside our page component.</p>\n<h2 id=\"grouping\">Grouping</h2>\n<p>You can group pages together without affecting the URL structure. You might want this to:</p>\n<ul>\n<li>not spam the url with extra segments</li>\n<li>opt into and out of certain layouts</li>\n<li>create multiple root layouts (one for the marketing pages, one for the dashboard, etc.)</li>\n</ul>\n<p>You can do this with the <code>()</code> syntax in the file structure:</p>\n<pre><code>- app\n  - (marketing)\n    - layout.tsx\n    - blog\n      - [title]\n        - page.tsx\n  - (dashboard)\n    - layout.tsx\n    - home\n      - page.tsx\n</code></pre>\n<p>Above, we created two groups, <code>marketing</code> and <code>dashboard</code>. Each group has their own root layout, so we don&#39;t need a single root layout here. Also, the URL structure is not affected. The path for the dashboard home is <code>/home</code> and not <code>/dashboard/home</code>. And the route for a blog post would be <code>/blog/learn-to-code</code> and not <code>/marketing/blog/learn-to-code</code>. The group folders are ignored by the router. This means you have to be aware of potential route conflicts. If the marketing group had a <code>home</code> folder with a page, it would have a conflicting route with the dashboard home page.</p>\n<h2 id=\"routes-for-our-app\">Routes for our app</h2>\n<ul>\n<li><code>/</code> - home</li>\n<li><code>/blog</code> - blog home</li>\n<li><code>/blog/:title</code> - blog post</li>\n<li><code>/contact</code> - contact page</li>\n</ul>\n","slug":"defining-routes","title":"Defining routes","section":"Pages","icon":"file-code","filePath":"/home/runner/work/intro-nextjs-v2-instructions/intro-nextjs-v2-instructions/lessons/03-Pages/A-defining-routes.md","nextSlug":"/lessons/Pages/layouts","prevSlug":"/lessons/Next.js/Getting-started"}},"__N_SSG":true}