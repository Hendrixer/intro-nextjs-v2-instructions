{"pageProps":{"post":{"attributes":{"title":"Client Components"},"html":"<p>Client components are the standard React components that you&#39;ve come to love and know. Full access to browser APIs, hooks, state, interactivity.</p>\n<h2 id=\"how-to-use\">How to use</h2>\n<p>We simply need to tell React that a component be a client component. Just add the <code>&#39;use client&#39;</code> directive at the top of any component you want to be a client component.</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-string\">&quot;use client&quot;</span>;\n\n<span class=\"hljs-comment\">// regular component</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">ContactForm</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> [state, setState] = <span class=\"hljs-title function_\">useState</span>({<span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;&#x27;</span>});\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleChange</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-comment\">//....</span>\n  }\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleSubmit</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-comment\">//....</span>\n  }\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{...}</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{state.email}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{handleChange}/</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>\n  )\n};\n</code></pre>\n<h2 id=\"when-to-use\">When to use</h2>\n<p>If your components need hooks like useState and useEffect, then they need to be a client component.</p>\n<br>\n\n<p>Also, there are 3rd party components that have yet to add the <code>&quot;use client&quot;</code> directive. You will have to wrap them in your own client components.</p>\n<h2 id=\"when-to-use-client-vs-server-components\">When to use client vs server components.</h2>\n<p>Basically always use server components for all of your components unless it falls in 1 or more of these:</p>\n<ul>\n<li>It needs interactivity and event listeners (onClick(), onChange(), etc)</li>\n<li>It uses State and Lifecycle Effects (useState(), useReducer(), useEffect(), etc)</li>\n<li>It uses browser-only APIs</li>\n<li>It needs custom hooks that depend on state, effects, or browser-only APIs</li>\n<li>It uses React Class components</li>\n</ul>\n","slug":"client-components","title":"Client Components","section":"Rendering","icon":"bolt","filePath":"/home/runner/work/intro-nextjs-v2-instructions/intro-nextjs-v2-instructions/lessons/04-Rendering/B-client-components.md","nextSlug":"/lessons/Data-fetching/fetching","prevSlug":"/lessons/Rendering/server-components"}},"__N_SSG":true}