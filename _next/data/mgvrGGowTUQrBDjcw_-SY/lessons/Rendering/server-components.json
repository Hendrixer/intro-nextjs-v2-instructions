{"pageProps":{"post":{"attributes":{"title":"Server Components"},"html":"<p>Finally, we&#39;ve been talking about server components a lot, so what are they? Server components are a concept created on the React.js level. You can checkout the RFC <a href=\"https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html\">here</a>.</p>\n<br>\n\n<p>Server components are components that never leave the server, so there is never any JavaScript that gets shipped to the client. This means that server components can&#39;t use things like hooks and client-side APIs that the browser provides. The results of rendering these components are streamed to the client and cached on a per route segment basis. By default, all components in the app directory in Next.js are server components.</p>\n<h2 id=\"server-components-vs-ssr\">Server components vs SSR</h2>\n<p>Traditional SSR is when a component is rendered on the server and the HTML is serialized and sent to the browser, not streamed. Then the client picks up and re-renders the same thing where it then takes over. So you&#39;re still shipping JS to the client.</p>\n<h2 id=\"when-to-use-server-components\">When to use Server components</h2>\n<p>You should always just use server components until you have a need for some client side interaction or using a 3rd party lib.</p>\n","slug":"server-components","title":"Server Components","section":"Rendering","icon":"bolt","filePath":"/home/runner/work/intro-nextjs-v2-instructions/intro-nextjs-v2-instructions/lessons/04-Rendering/A-server-components.md","nextSlug":"/lessons/Rendering/client-components","prevSlug":"/lessons/Pages/navigation"}},"__N_SSG":true}